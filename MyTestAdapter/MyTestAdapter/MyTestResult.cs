// A custom adapter to discover and execute MSTest Framework based tests.
//
// Copyright (c) 2019 Jorge Ramos (mailto jramos at pobox dot com)
//
// This is free software. Redistribution and use in source and binary forms,
// with or without modification, for any purpose and with or without fee are
// hereby permitted. Altered source versions must be plainly marked as such.
//
// If you find this software useful, an acknowledgment would be appreciated
// but is not required.
//
// THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT ANY WARRANTY OR CONDITION.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE TO ANYONE
// FOR ANY DAMAGES RELATED TO THIS SOFTWARE, UNDER ANY KIND OF LEGAL CLAIM.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyTestAdapter
{
    /// <summary>
    /// The test result.
    /// </summary>
    public class MyTestResult
    {
        /// <summary>
        /// The name of the test method.
        /// </summary>
        public string TestName { get; internal set; }

        /// <summary>
        /// The name of the test.
        /// </summary>
        /// <remarks>
        /// Usually the name of the test method decorated with the parameters.
        /// </remarks>
        public string DisplayName { get; internal set; }

        /// <summary>
        /// The test parameters.
        /// </summary>
        public object[] Parameters { get; internal set; }

        /// <summary>
        /// The test outcome.
        /// </summary>
        public MyTestOutcome TestOutcome { get; internal set; }

        /// <summary>
        /// The last exception generated by the test.
        /// </summary>
        public Exception LastException { get; internal set; }

        /// <summary>
        /// The elapsed time of the test.
        /// </summary>
        public double ElapsedSeconds { get; internal set; }
    }
}
